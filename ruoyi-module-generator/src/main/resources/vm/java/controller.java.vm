package ${packageName}.controller;

import java.util.List;
import java.util.Arrays;

import com.ruoyi.common.utils.BeanCopyUtils;
import lombok.RequiredArgsConstructor;
import javax.servlet.http.HttpServletResponse;
import javax.validation.constraints.*;
import cn.dev33.satoken.annotation.SaCheckPermission;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import com.ruoyi.common.annotation.RepeatSubmit;
import com.ruoyi.common.annotation.AdminLog;
import com.ruoyi.admin.controller.AdminBaseController;
import com.ruoyi.common.core.domain.bo.PageQuery;
import com.ruoyi.common.core.domain.R;
import com.ruoyi.common.enums.BusinessTypeEnum;
import com.ruoyi.common.utils.poi.ExcelUtil;
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.bo.${ClassName}PageQueryBo;
import ${packageName}.domain.bo.${ClassName}QueryBo;
import ${packageName}.domain.bo.${ClassName}AddBo;
import ${packageName}.domain.bo.${ClassName}EditBo;
import ${packageName}.service.I${ClassName}Service;
#if($table.isCrud() || $table.isSub())
import com.ruoyi.common.core.page.TableDataInfo;
#elseif($table.isTree())
#end
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * ${functionName} 后台管理控制器
 *
 * @author ${author}
 * @date ${datetime}
 */
@Validated
@Tag(description = "${functionName}管理", name = "${ClassName}Service")
@RequiredArgsConstructor
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends AdminBaseController {

    /**
    * ${functionName}服务
    */
    private final I${ClassName}Service i${ClassName}Service;

    /**
     * 查询${functionName}列表
     */
    @Operation(description = "查询${functionName}列表", operationId = "${ClassName}PostList")
    @SaCheckPermission("${permissionPrefix}:list")
    @PostMapping("/list")
#if($table.isCrud() || $table.isSub())
    public TableDataInfo<${ClassName}Vo> list(@RequestBody(required = false) ${ClassName}PageQueryBo bo) {
        // 分页参数组装
        PageQuery pageQuery = BeanCopyUtils.copy(bo, PageQuery.class);
        // 查询参数组装
        ${ClassName}QueryBo queryBo = BeanCopyUtils.copy(bo, ${ClassName}QueryBo.class);
        return i${ClassName}Service.queryPageList(queryBo, pageQuery);
    }
#elseif($table.isTree())
    public R<List<${ClassName}Vo>> list(@RequestBody(required = false) ${ClassName}QueryBo bo) {
        List<${ClassName}Vo> list = i${ClassName}Service.queryList(bo);
        return R.ok(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
    @Operation(description = "导出${functionName}列表", operationId = "${ClassName}PostExport")
    @SaCheckPermission("${permissionPrefix}:export")
    @AdminLog(title = "${functionName}", businessType = BusinessTypeEnum.EXPORT)
    @PostMapping("/export")
    public void export(@RequestBody(required = false) ${ClassName}QueryBo bo, @ApiParam(hidden = true) HttpServletResponse response) {
        List<${ClassName}Vo> list = i${ClassName}Service.queryList(bo);
        ExcelUtil.exportExcel(list, "${functionName}", ${ClassName}Vo.class, response);
    }

    /**
     * 获取${functionName}详细信息
     */
    @Operation(description = "获取${functionName}详细信息", operationId = "${ClassName}GetInfo")
    @SaCheckPermission("${permissionPrefix}:query")
    @GetMapping(value = "/info")
    public R<${ClassName}Vo> getInfo(@Parameter(description = "主键", required = true)
                                     @NotNull(message = "主键不能为空")
                                     @RequestParam(required = true) ${pkColumn.javaType.getCode()} ${pkColumn.javaField}) {
        return R.ok(i${ClassName}Service.queryById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @Operation(description = "新增${functionName}", operationId = "${ClassName}PostAdd")
    @SaCheckPermission("${permissionPrefix}:add")
    @AdminLog(title = "${functionName}", businessType = BusinessTypeEnum.ADD)
    @RepeatSubmit()
    @PostMapping("/add")
    public R<Void> add(@Validated @RequestBody ${ClassName}AddBo bo) {
        return toAjax(i${ClassName}Service.insertByBo(bo));
    }

    /**
     * 修改${functionName}
     */
    @Operation(description = "修改${functionName}", operationId = "${ClassName}PostEdit")
    @SaCheckPermission("${permissionPrefix}:edit")
    @AdminLog(title = "${functionName}", businessType = BusinessTypeEnum.MODIFY)
    @RepeatSubmit()
    @PostMapping("/edit")
    public R<Void> edit(@Validated @RequestBody ${ClassName}EditBo bo) {
        return toAjax(i${ClassName}Service.updateByBo(bo));
    }

    /**
     * 删除${functionName}
     */
    @Operation(description = "删除${functionName}", operationId = "${ClassName}PostRemove")
    @SaCheckPermission("${permissionPrefix}:remove")
    @AdminLog(title = "${functionName}", businessType = BusinessTypeEnum.DELETE)
    @PostMapping("/remove")
    public R<Void> remove(@Parameter(description = "主键串", required = true)
                                       @NotEmpty(message = "主键不能为空")
                                       @RequestParam(required = true) ${pkColumn.javaType.getCode()}[] ${pkColumn.javaField}s) {
        return toAjax(i${ClassName}Service.deleteWithValidByIds(Arrays.asList(${pkColumn.javaField}s), true));
    }
}
