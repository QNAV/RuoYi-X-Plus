package ${packageName}.service.impl;

import cn.hutool.core.bean.BeanUtil;
import cn.hutool.core.util.ObjectUtil;
#if($table.isCrud() || $table.isSub())
import com.ruoyi.common.core.page.TableDataInfo;
import com.ruoyi.common.core.domain.bo.PageQuery;
import com.ruoyi.common.utils.StringUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ${packageName}.domain.bo.${ClassName}PageQueryBo;
import ${packageName}.domain.bo.${ClassName}QueryBo;
import ${packageName}.domain.bo.${ClassName}AddBo;
import ${packageName}.domain.bo.${ClassName}EditBo;
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.I${ClassName}Service;

import java.util.List;
import java.util.Map;
import java.util.Collection;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@RequiredArgsConstructor
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {

    /**
    * ${functionName}Mapper接口
    */
    private final ${ClassName}Mapper baseMapper;

    /**
     * 查询${functionName}
     * @param ${pkColumn.javaField} 主键编号
     */
    @Override
    public ${ClassName}Vo queryById(${pkColumn.javaType.getCode()} ${pkColumn.javaField}){
        return baseMapper.selectVoById(${pkColumn.javaField});
    }

#if($table.isCrud() || $table.isSub())
    /**
     * 查询${functionName}分页列表
     * @param queryBo ${functionName}业务查询对象
     * @param pageQuery 通用分页查询对象
     */
    @Override
    public TableDataInfo<${ClassName}Vo> queryPageList(${ClassName}QueryBo queryBo, PageQuery pageQuery) {
        if (ObjectUtil.isNull(pageQuery)){
            pageQuery = new PageQuery();
        }
        LambdaQueryWrapper<${ClassName}> lqw = buildQueryWrapper(queryBo);
        Page<${ClassName}Vo> result = baseMapper.selectVoPage(pageQuery.build(), lqw);
        return TableDataInfo.build(result);
    }
#end

    /**
     * 查询${functionName}列表
     * @param queryBo ${functionName}业务查询对象
     */
    @Override
    public List<${ClassName}Vo> queryList(${ClassName}QueryBo queryBo) {
        LambdaQueryWrapper<${ClassName}> lqw = buildQueryWrapper(queryBo);
        return baseMapper.selectVoList(lqw);
    }

    /**
     * 构建${functionName}查询包装器
     * @param queryBo ${functionName}业务查询对象
     */
    private LambdaQueryWrapper<${ClassName}> buildQueryWrapper(${ClassName}QueryBo queryBo) {
        if (ObjectUtil.isNull(queryBo)){
            queryBo = new ${ClassName}QueryBo();
        }
        LambdaQueryWrapper<${ClassName}> lqw = Wrappers.lambdaQuery();
#foreach($column in $columns)
#if($column.isQuery())
    #set($queryType=$column.queryType)
    #set($javaField=$column.javaField)
    #set($javaType=$column.javaType.getCode())
    #set($columnName=$column.columnName)
    #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #set($mpMethod=$column.queryType.toString().toLowerCase())
    #if($queryType != 'BETWEEN')
        #if($javaType == 'String')
            #set($condition='StringUtils.isNotBlank(queryBo.get'+$AttrName+'())')
        #else
            #set($condition='queryBo.get'+$AttrName+'() != null')
    #end
        lqw.$mpMethod($condition, ${ClassName}::get$AttrName, queryBo.get$AttrName());
#else
        lqw.between(queryBo.getCreateBeginTime() != null && queryBo.getCreateEndTime() != null,
            ${ClassName}::getCreateTime, queryBo.getCreateBeginTime(), queryBo.getCreateEndTime());
#end
#end
#end
        return lqw;
    }

    /**
     * 新增${functionName}
     * @param addBo ${functionName}业务新增对象
     */
    @Override
    public Boolean insertByBo(${ClassName}AddBo addBo) {
        ${ClassName} add = BeanUtil.toBean(addBo, ${ClassName}.class);
        validEntityBeforeAdd(add);
        validEntityBeforeSave(add);
        boolean flag = baseMapper.insert(add) > 0;
#set($pk=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
        return flag;
    }

    /**
     * 修改${functionName}
     * @param editBo ${functionName}业务修改对象
     */
    @Override
    public Boolean updateByBo(${ClassName}EditBo editBo) {
        ${ClassName} update = BeanUtil.toBean(editBo, ${ClassName}.class);
        validEntityBeforeUpdate(update);
        validEntityBeforeSave(update);
        return baseMapper.updateById(update) > 0;
    }

    /**
     * 保存前的数据校验
     * @param entity ${functionName}实体对象
     */
    private void validEntityBeforeSave(${ClassName} entity){
        //TODO 做一些数据校验,如唯一约束
    }


    /**
     * 新增前的数据校验
     * @param entity ${functionName}实体对象
     */
    private void validEntityBeforeAdd(${ClassName} entity){
        //TODO 做一些数据校验,如唯一约束
    }

    /**
     * 更新前的数据校验
     * @param entity ${functionName}实体对象
     */
    private void validEntityBeforeUpdate(${ClassName} entity){
        //TODO 做一些数据校验,如唯一约束
    }

    /**
     * 校验并批量删除${functionName}信息
     * @param ids 主键集合
     * @param isValid 是否检验?
     */
    @Override
    public Boolean deleteWithValidByIds(Collection<${pkColumn.javaType.getCode()}> ids, Boolean isValid) {
        if(isValid){
            //TODO 做一些业务上的校验,判断是否需要校验
        }
        return baseMapper.deleteBatchIds(ids) > 0;
    }
}
